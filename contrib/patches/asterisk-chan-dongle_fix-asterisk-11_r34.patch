Index: app.c
===================================================================
--- app.c	(revision 34)
+++ app.c	(working copy)
@@ -18,8 +18,9 @@
 #include <asterisk/app.h>	/* AST_DECLARE_APP_ARGS() ... */
 #include <asterisk/pbx.h>	/* pbx_builtin_setvar_helper() */
 #include <asterisk/module.h>	/* ast_register_application2() ast_unregister_application() */
-#include <asterisk/version.h>	/* ASTERISK_VERSION_NUM */
 
+#include "ast_compat.h"		/* asterisk compatibility fixes */
+
 #include "app.h"		/* app_register() app_unregister() */
 #include "chan_dongle.h"	/* struct pvt */
 #include "helpers.h"		/* send_sms() ITEMS_OF() */
Index: ast_compat.h
===================================================================
--- ast_compat.h	(revision 0)
+++ ast_compat.h	(working copy)
@@ -0,0 +1,56 @@
+#ifndef CHAN_DONGLE_AST_COMPAT_H_INCLUDED
+#define CHAN_DONGLE_AST_COMPAT_H_INCLUDED
+
+#ifndef ASTERISK_VERSION_NUM
+#error ASTERISK_VERSION_NUM is not set. Please re-run configure, \
+	prefixed like this: CPPFLAGS=-DASTERISK_VERSION_NUM=100501 \
+	./configure (where 100501 is asterisk version 10.5.1).
+#endif
+
+#include <asterisk/channel.h>
+
+/* Asterisk 11+ channel opaqification */
+#if ASTERISK_VERSION_NUM < 110000
+
+/* channel->name */
+static inline const char *ast_channel_name(const struct ast_channel *chan) { return chan->name; }
+
+/* channel->_state / channel->state */
+static inline enum ast_channel_state ast_channel_state(const struct ast_channel *chan) { return chan->_state; }
+
+/* channel->fdno */
+static inline int ast_channel_fdno(const struct ast_channel *chan) { return chan->fdno; }
+
+/* channel->tech */
+static inline const struct ast_channel_tech *ast_channel_tech(const struct ast_channel *chan) { return chan->tech; }
+static inline void ast_channel_tech_set(struct ast_channel *chan, const struct ast_channel_tech *value) { chan->tech = value; }
+
+static inline void *ast_channel_tech_pvt(const struct ast_channel *chan) { return chan->tech_pvt; }
+static inline void ast_channel_tech_pvt_set(struct ast_channel *chan, void *value) { chan->tech_pvt = value; }
+
+/* channel->rings */
+static inline int ast_channel_rings(const struct ast_channel *chan) { return chan->rings; }
+static inline void ast_channel_rings_set(struct ast_channel *chan, int value) { chan->rings = value; }
+
+/* ast_string_field_set(channel, language, ...) */
+static inline void ast_channel_language_set(struct ast_channel *chan, const char *value) { ast_string_field_set(chan, language, value); }
+
+/* channel->connected */
+static inline struct ast_party_connected_line *ast_channel_connected(struct ast_channel *chan) { return &chan->connected; }
+
+/* channel->linkedid */
+static inline const char *ast_channel_linkedid(const struct ast_channel *chan) { return chan->linkedid; }
+
+/* channel->hangupcause */
+static inline void ast_channel_hangupcause_set(struct ast_channel *chan, int value) { chan->hangupcause = value; }
+
+#if ASTERISK_VERSION_NUM >= 100000
+/* channel->*format* */
+static inline struct ast_format_cap *ast_channel_nativeformats(const struct ast_channel *chan) { return chan->nativeformats; }
+static inline struct ast_format ast_channel_readformat(const struct ast_channel *chan) { return chan->readformat; }
+static inline struct ast_format ast_channel_writeformat(const struct ast_channel *chan) { return chan->writeformat; }
+#endif
+
+#endif
+
+#endif /* CHAN_DONGLE_AST_COMPAT_H_INCLUDED */
Index: at_response.c
===================================================================
--- at_response.c	(revision 34)
+++ at_response.c	(working copy)
@@ -16,6 +16,8 @@
 #include <asterisk/logger.h>			/* ast_debug() */
 #include <asterisk/pbx.h>			/* ast_pbx_start() */
 
+#include "ast_compat.h"		/* asterisk compatibility fixes */
+
 #include "at_response.h"
 #include "mutils.h"				/* STRLEN() */
 #include "at_queue.h"
@@ -851,14 +853,14 @@
 
 		return -1;
 	}
-	cpvt = channel->tech_pvt;
+	cpvt = ast_channel_tech_pvt(channel);
 // FIXME: not execute if channel_new() failed
 	CPVT_SET_FLAGS(cpvt, CALL_FLAG_NEED_HANGUP);
 
 	// ast_pbx_start() usually failed if asterisk.conf minmemfree set too low, try drop buffer cache sync && echo 3 > /proc/sys/vm/drop_caches
 	if (ast_pbx_start (channel))
 	{
-		channel->tech_pvt = NULL;
+		ast_channel_tech_pvt_set(channel, NULL);
 		cpvt_free(cpvt);
 
 		ast_hangup (channel);
@@ -920,8 +922,7 @@
 								if(cpvt->channel)
 								{
 									/* FIXME: unprotected channel access */
-									cpvt->channel->rings += pvt->rings;
-									pvt->rings = 0;
+									ast_channel_rings_set(cpvt->channel, ast_channel_rings(cpvt->channel) + pvt->rings);
 								}
 							}
 							if(state != cpvt->state)
Index: chan_dongle.c
===================================================================
--- chan_dongle.c	(revision 34)
+++ chan_dongle.c	(working copy)
@@ -56,6 +56,8 @@
 #include <fcntl.h>			/* O_RDWR O_NOCTTY */
 #include <signal.h>			/* SIGURG */
 
+#include "ast_compat.h"			/* asterisk compatibility fixes */
+
 #include "chan_dongle.h"
 #include "at_response.h"		/* at_res_t */
 #include "at_queue.h"			/* struct at_queue_task_cmd at_queue_head_cmd() */
@@ -71,6 +73,10 @@
 
 EXPORT_DEF const char * const dev_state_strs[4] = { "stop", "restart", "remove", "start" };
 EXPORT_DEF public_state_t * gpublic;
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+EXPORT_DEF struct ast_format chan_dongle_format;
+EXPORT_DEF struct ast_format_cap * chan_dongle_format_cap;
+#endif
 
 
 static int public_state_init(struct public_state * state);
Index: chan_dongle.h
===================================================================
--- chan_dongle.h	(revision 34)
+++ chan_dongle.h	(working copy)
@@ -13,6 +13,8 @@
 #include <asterisk/lock.h>
 #include <asterisk/linkedlists.h>
 
+#include <ast_compat.h>
+
 #include "mixbuffer.h"				/* struct mixbuffer */
 //#include "ringbuffer.h"				/* struct ringbuffer */
 #include "cpvt.h"				/* struct cpvt */
@@ -33,6 +35,11 @@
 	return enum2str(state, states, ITEMS_OF(states));
 }
 
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+/* Only linear is allowed */
+EXPORT_DECL struct ast_format chan_dongle_format;
+EXPORT_DECL struct ast_format_cap * chan_dongle_format_cap;
+#endif
 
 typedef enum {
 	RESTATE_TIME_NOW	= 0,
Index: channel.c
===================================================================
--- channel.c	(revision 34)
+++ channel.c	(working copy)
@@ -12,6 +12,10 @@
 #include <config.h>
 #endif /* HAVE_CONFIG_H */
 
+#ifndef ASTERISK_VERSION_NUM
+#error ASTERISK_VERSION_NUM is not set, please supply -D ASTERISK_VERSION_NUM=100501 for version 10.5.1
+#endif
+
 #include <asterisk.h>
 #include <asterisk/dsp.h>			/* ast_dsp_digitreset() */
 #include <asterisk/pbx.h>			/* pbx_builtin_setvar_helper() */
@@ -20,8 +24,9 @@
 #include <asterisk/musiconhold.h>		/* ast_moh_start() ast_moh_stop() */
 #include <asterisk/lock.h>			/* AST_MUTEX_DEFINE_STATIC */
 #include <asterisk/timing.h>			/* ast_timer_fd() ast_timer_set_rate() ast_timer_ack() */
-#include <asterisk/version.h>			/* ASTERISK_VERSION_NUM */
 
+#include "ast_compat.h"
+
 #include "channel.h"
 #include "chan_dongle.h"
 #include "at_command.h"
@@ -29,6 +34,7 @@
 #include "at_queue.h"				/* write_all() TODO: move out */
 #include "manager.h"				/* manager_event_call_state_change() */
 
+
 static char silence_frame[FRAME_SIZE];
 
 #/* */
@@ -90,25 +96,27 @@
 	/* FIXME: requestor may be just proxy/masquerade for real channel */
 	//	use ast_bridged_channel(chan) ?
 	//	use requestor->tech->get_base_channel() ?
-	if(requestor && requestor->tech == &channel_tech && requestor->tech_pvt && ((struct cpvt*)requestor->tech_pvt)->pvt == pvt)
+	struct cpvt *cpvt = ast_channel_tech_pvt(requestor);
+	if(requestor && ast_channel_tech(requestor) == &channel_tech && cpvt && cpvt->pvt == pvt)
 		return 1;
 	return 0;
 }
 
-#if ASTERISK_VERSION_NUM >= 10800
-//   TODO: simplify by move common code to functions
+// TODO: simplify by move common code to functions
+/* TODO: add check when request 'holdother' what requestor is not on same device for 1.6 */
+#if ASTERISK_VERSION_NUM >= 110000 /* 11+ */
+static struct ast_channel * channel_request (attribute_unused const char *type, struct ast_format_cap *cap, const struct ast_channel *requestor, const char *data, int *cause)
+#elif ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+static struct ast_channel * channel_request (attribute_unused const char * type, struct ast_format_cap * cap, const struct ast_channel *requestor, void * data, int * cause)
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 static struct ast_channel * channel_request (attribute_unused const char * type, format_t format, const struct ast_channel * requestor, void * data, int * cause)
-
-#else /* #if ASTERISK_VERSION_NUM >= 10800 */
-/* TODO: add check when request 'holdother' what requestor is not on same device for 1.6 */
-
+#else /* #if ASTERISK_VERSION_NUM < 10800 */
 static struct ast_channel * channel_request (attribute_unused const char * type, int format, void * data, int * cause)
-
-#endif /* #if ASTERISK_VERSION_NUM >= 10800 */
+#endif /* #if ASTERISK_VERSION_NUM < 10800 */
 {
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 10800 && ASTERISK_VERSION_NUM < 100000 /* 1.8+ .. 10- */
 	format_t oldformat;
-#else
+#elif ASTERISK_VERSION_NUM < 10800 /* 1.8- */
 	int oldformat;
 	const struct ast_channel * requestor = NULL;
 #endif
@@ -119,6 +127,8 @@
 	int opts = CALL_FLAG_NONE;
 	int exists;
 
+//	(void)cap; /* touch cap so compiler doesn't complain */
+
 	if (!data)
 	{
 		ast_log (LOG_WARNING, "Channel requested with no data\n");
@@ -126,11 +136,18 @@
 		return NULL;
 	}
 
-	oldformat = format;
-	format &= AST_FORMAT_SLINEAR;
-	if (!format)
-	{
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	if (!ast_format_cap_iscompatible(cap, &chan_dongle_format))
+#else
+        oldformat = format;
+        format &= AST_FORMAT_SLINEAR;
+        if (!format)
+#endif
+        {
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+		char buf[255];
+		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%s'\n", ast_getformatname_multiple (buf, 255, cap));
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%s'\n", ast_getformatname (oldformat));
 #else
 		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%d'\n", oldformat);
@@ -171,9 +188,13 @@
 }
 
 #/* */
+#if ASTERISK_VERSION_NUM >= 110000 /* 11+ */
+static int channel_call (struct ast_channel* channel, const char *dest, attribute_unused int timeout)
+#else
 static int channel_call (struct ast_channel* channel, char* dest, attribute_unused int timeout)
+#endif
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	char* dest_dev;
 	const char* dest_num;
@@ -182,7 +203,7 @@
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -192,9 +213,9 @@
 	if(parse_dial_string(dest_dev, &dest_num, &opts))
 		return -1;
 
-	if ((channel->_state != AST_STATE_DOWN) && (channel->_state != AST_STATE_RESERVED))
+	if ((ast_channel_state(channel) != AST_STATE_DOWN) && (ast_channel_state(channel) != AST_STATE_RESERVED))
 	{
-		ast_log (LOG_WARNING, "channel_call called on %s, neither down nor reserved\n", channel->name);
+		ast_log (LOG_WARNING, "channel_call called on %s, neither down nor reserved\n", ast_channel_name(channel));
 		return -1;
 	}
 
@@ -209,14 +230,14 @@
 	}
 	CPVT_SET_FLAGS(cpvt, opts);
 
-	ast_debug (1, "[%s] Calling %s on %s\n", PVT_ID(pvt), dest, channel->name);
+	ast_debug (1, "[%s] Calling %s on %s\n", PVT_ID(pvt), dest, ast_channel_name(channel));
 
 	if (CONF_SHARED(pvt, usecallingpres))
 	{
 		if (CONF_SHARED(pvt, callingpres) < 0)
 		{
 #if ASTERISK_VERSION_NUM >= 10800
-			clir = channel->connected.id.number.presentation;
+			clir = ast_channel_connected(channel)->id.number.presentation;
 #else
 			clir = channel->cid.cid_pres;
 #endif
@@ -328,7 +349,7 @@
 #/* we has 2 case of call this function, when local side want terminate call and when called for cleanup after remote side alreay terminate call, CEND received and cpvt destroyed */
 static int channel_hangup (struct ast_channel* channel)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 
 	/* its possible call with channel w/o tech_pvt */
@@ -357,7 +378,7 @@
 	}
 
 	/* drop channel -> cpvt reference */
-	channel->tech_pvt = NULL;
+	ast_channel_tech_pvt_set(channel, NULL);
 
 	ast_module_unref (self_module());
 	ast_setstate (channel, AST_STATE_DOWN);
@@ -368,12 +389,12 @@
 #/* */
 static int channel_answer (struct ast_channel* channel)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return 0;
 	}
 	pvt = cpvt->pvt;
@@ -397,13 +418,13 @@
 #/* */
 static int channel_digit_begin (struct ast_channel* channel, char digit)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	int rv;
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -571,18 +592,21 @@
 
 }
 
-#if ASTERISK_VERSION_NUM >= 10800
-#define subclass_codec		subclass.codec
-#define subclass_integer	subclass.integer
-#else
-#define subclass_codec		subclass
-#define subclass_integer	subclass
+
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+#define subclass_integer       subclass.integer
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
+#define subclass_codec         subclass.codec
+#define subclass_integer       subclass.integer
+#else /* 1.8- */
+#define subclass_codec         subclass  
+#define subclass_integer       subclass  
 #endif
 
 #/* */
 static struct ast_frame* channel_read (struct ast_channel* channel)
 {
-	struct cpvt*		cpvt = channel->tech_pvt;
+	struct cpvt*		cpvt = ast_channel_tech_pvt(channel);
 	struct pvt*		pvt;
 	struct ast_frame*	f = &ast_null_frame;
 	ssize_t			res;
@@ -606,7 +630,7 @@
 		goto e_return;
 	}
 
-	if (pvt->a_timer && channel->fdno == 1)
+	if (pvt->a_timer && ast_channel_fdno(channel) == 1)
 	{
 		ast_timer_ack (pvt->a_timer, 1);
 		timing_write (pvt);
@@ -618,7 +642,11 @@
 		memset (&cpvt->a_read_frame, 0, sizeof (cpvt->a_read_frame));
 
 		cpvt->a_read_frame.frametype = AST_FRAME_VOICE;
-		cpvt->a_read_frame.subclass_codec= AST_FORMAT_SLINEAR;
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+		ast_format_copy(&cpvt->a_read_frame.subclass.format, &chan_dongle_format);
+#else
+		cpvt->a_read_frame.subclass_codec = AST_FORMAT_SLINEAR;
+#endif
 		cpvt->a_read_frame.data.ptr = cpvt->a_read_buf + AST_FRIENDLY_OFFSET;
 		cpvt->a_read_frame.offset = AST_FRIENDLY_OFFSET;
 		cpvt->a_read_frame.src = AST_MODULE;
@@ -727,19 +755,23 @@
 #/* */
 static int channel_write (struct ast_channel* channel, struct ast_frame* f)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	size_t count;
 	int gains[2];
 
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	if (f->frametype != AST_FRAME_VOICE || f->subclass.format.id != AST_FORMAT_SLINEAR)
+#else /* 10- */
 	if (f->frametype != AST_FRAME_VOICE || f->subclass_codec != AST_FORMAT_SLINEAR)
+#endif
 	{
 		return 0;
 	}
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return 0;
 	}
 
@@ -764,14 +796,16 @@
 	if(CPVT_TEST_FLAG(cpvt, CALL_FLAG_MULTIPARTY) && !CPVT_TEST_FLAG(cpvt, CALL_FLAG_BRIDGE_CHECK))
 	{
 		struct ast_channel* bridged = ast_bridged_channel(channel);
+		struct cpvt *tmp_cpvt;
 
 		CPVT_SET_FLAGS(cpvt, CALL_FLAG_BRIDGE_CHECK);
 
-		if(bridged && bridged->tech == &channel_tech && bridged->tech_pvt && ((struct cpvt*)bridged->tech_pvt)->pvt == pvt)
+		tmp_cpvt = ast_channel_tech_pvt(bridged);
+		if(bridged && ast_channel_tech(bridged) == &channel_tech && tmp_cpvt && tmp_cpvt->pvt == pvt)
 		{
 			CPVT_SET_FLAGS(cpvt, CALL_FLAG_BRIDGE_LOOP);
-			CPVT_SET_FLAGS((struct cpvt*)bridged->tech_pvt, CALL_FLAG_BRIDGE_LOOP);
-			ast_log (LOG_WARNING, "[%s] Bridged channels %s and %s working on same device, discard writes to avoid voice loop\n", PVT_ID(pvt), channel->name, bridged->name);
+			CPVT_SET_FLAGS((struct cpvt*)ast_channel_tech_pvt(bridged), CALL_FLAG_BRIDGE_LOOP);
+			ast_log(LOG_WARNING, "[%s] Bridged channels %s and %s working on same device, discard writes to avoid voice loop\n", PVT_ID(pvt), ast_channel_name(channel), ast_channel_name(bridged));
 			goto e_return;
 		}
 	}
@@ -894,12 +928,12 @@
 #/* */
 static int channel_fixup (struct ast_channel* oldchannel, struct ast_channel* newchannel)
 {
-	struct cpvt * cpvt = newchannel->tech_pvt;
+	struct cpvt * cpvt = ast_channel_tech_pvt(newchannel);
 	struct pvt* pvt;
 
 	if (!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", newchannel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(newchannel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -915,7 +949,11 @@
 }
 
 #/* FIXME: must modify in conjuction with state on call not whole device? */
+#if ASTERISK_VERSION_NUM >= 110000 /* 11+ */
+static int channel_devicestate (const char *data)
+#else
 static int channel_devicestate (void* data)
+#endif
 {
 	char*	device;
 	struct pvt*	pvt;
@@ -950,7 +988,7 @@
 {
 	int res = 0;
 
-	ast_debug (1, "[%s] Requested indication %d\n", channel->name, condition);
+	ast_debug (1, "[%s] Requested indication %d\n", ast_channel_name(channel), condition);
 
 	switch (condition)
 	{
@@ -979,7 +1017,7 @@
 			break;
 
 		default:
-			ast_log (LOG_WARNING, "[%s] Don't know how to indicate condition %d\n", channel->name, condition);
+			ast_log (LOG_WARNING, "[%s] Don't know how to indicate condition %d\n", ast_channel_name(channel), condition);
 			res = -1;
 			break;
 	}
@@ -1091,7 +1129,7 @@
 
 
 					/* drop channel -> cpvt reference */
-					channel->tech_pvt = NULL;
+					ast_channel_tech_pvt_set(channel, NULL);
 					cpvt_free(cpvt);
 					if (queue_hangup (channel, cause))
 					{
@@ -1118,7 +1156,7 @@
 		{ "DONGLENUMBER", pvt->subscriber_number },
 	};
 
-	ast_string_field_set (channel, language, CONF_SHARED(pvt, language));
+	ast_channel_language_set(channel, CONF_SHARED(pvt, language));
 
 	for(idx = 0; idx < ITEMS_OF(dev_vars); ++idx)
 		pbx_builtin_setvar_helper (channel, dev_vars[idx].name, dev_vars[idx].value);
@@ -1135,7 +1173,7 @@
 	if (cpvt)
 	{
 #if ASTERISK_VERSION_NUM >= 10800
-		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), requestor ? requestor->linkedid : NULL, 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
+		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), requestor ? ast_channel_linkedid(requestor) : NULL, 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
 #else
 		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
 #endif
@@ -1144,15 +1182,27 @@
 			cpvt->channel = channel;
 			pvt->channel_instanse++;
 
-			channel->tech_pvt	= cpvt;
-			channel->tech		= &channel_tech;
+			ast_channel_tech_pvt_set(channel, cpvt);
+			ast_channel_tech_set(channel, &channel_tech);
+
+
+#if ASTERISK_VERSION_NUM >= 110000 /* 11+ */
+			ast_format_set(ast_channel_readformat(channel), AST_FORMAT_SLINEAR, 0);
+			ast_format_set(ast_channel_writeformat(channel), AST_FORMAT_SLINEAR, 0);
+			ast_format_cap_set(ast_channel_nativeformats(channel), ast_channel_writeformat(channel));
+#elif ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+			ast_format_set(&channel->readformat, AST_FORMAT_SLINEAR, 0);
+			ast_format_set(&channel->writeformat, AST_FORMAT_SLINEAR, 0);
+			ast_format_cap_set(channel->nativeformats, &channel->writeformat);
+#else /* 10- */
 			channel->nativeformats	= AST_FORMAT_SLINEAR;
 			channel->writeformat	= AST_FORMAT_SLINEAR;
 			channel->readformat	= AST_FORMAT_SLINEAR;
+#endif
 
 			if (ast_state == AST_STATE_RING)
 			{
-				channel->rings = 1;
+				ast_channel_rings_set(channel, 1);
 			}
 
 			set_channel_vars(pvt, channel);
@@ -1219,8 +1269,9 @@
 	int rv = 0;
 	if(channel)
 	{
-		if (hangupcause != 0)
-			channel->hangupcause = hangupcause;
+		if (hangupcause != 0) {
+			ast_channel_hangupcause_set(channel, hangupcause);
+		}
 
 		rv = ast_queue_hangup (channel);
 	}
@@ -1236,8 +1287,10 @@
 
 	snprintf (channel_name, sizeof (channel_name), "%s@%s", exten, CONF_SHARED(pvt, context));
 
-#if ASTERISK_VERSION_NUM >= 10800
-	channel = ast_request ("Local", AST_FORMAT_AUDIO_MASK, NULL, channel_name, &cause);
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	channel = ast_request ("Local", chan_dongle_format_cap, NULL, channel_name, &cause);
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
+        channel = ast_request ("Local", AST_FORMAT_AUDIO_MASK, NULL, channel_name, &cause);
 #else
 	channel = ast_request ("Local", AST_FORMAT_AUDIO_MASK, channel_name, &cause);
 #endif
@@ -1265,13 +1318,13 @@
 #/* */
 static int channel_func_read(struct ast_channel* channel, attribute_unused const char* function, char* data, char* buf, size_t len)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	int ret = 0;
 
 	if(!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -1322,14 +1375,14 @@
 #/* */
 static int channel_func_write(struct ast_channel* channel, const char* function, char* data, const char* value)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	call_state_t newstate, oldstate;
 	int ret = 0;
 
 	if(!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -1399,11 +1452,13 @@
 	return ret;
 }
 
-EXPORT_DEF const struct ast_channel_tech channel_tech =
+EXPORT_DEF struct ast_channel_tech channel_tech =
 {
 	.type			= "Dongle",
 	.description		= MODULE_DESCRIPTION,
-	.capabilities		= AST_FORMAT_SLINEAR,
+#if ASTERISK_VERSION_NUM < 100000 /* 10- */
+        .capabilities           = AST_FORMAT_SLINEAR,
+#endif
 	.requester		= channel_request,
 	.call			= channel_call,
 	.hangup			= channel_hangup,
Index: channel.h
===================================================================
--- channel.h	(revision 34)
+++ channel.h	(working copy)
@@ -19,7 +19,7 @@
 struct pvt;
 struct cpvt;
 
-EXPORT_DECL const struct ast_channel_tech channel_tech;
+EXPORT_DECL struct ast_channel_tech channel_tech;
 
 EXPORT_DECL struct ast_channel* new_channel (struct pvt * pvt, int ast_state, const char * cid_num, int call_idx, unsigned dir, unsigned state, const char * exten, const struct ast_channel * requestor);
 EXPORT_DECL int queue_control_channel (struct cpvt * cpvt, enum ast_control_frame_type control);
Index: cli.c
===================================================================
--- cli.c	(revision 34)
+++ cli.c	(working copy)
@@ -12,10 +12,14 @@
 #include <config.h>
 #endif /* HAVE_CONFIG_H */
 
+#ifndef ASTERISK_VERSION_NUM
+#error ASTERISK_VERSION_NUM is not set, please supply \
+	-D ASTERISK_VERSION_NUM=100501 for version 10.5.1
+#endif
+
 #include <asterisk.h>
 #include <asterisk/cli.h>			/* struct ast_cli_entry; struct ast_cli_args */
 #include <asterisk/callerid.h>			/* ast_describe_caller_presentation() */
-#include <asterisk/version.h>			/* ASTERISK_VERSION_NUM */
 
 #include "cli.h"
 #include "chan_dongle.h"			/* devices */
Index: Makefile.in
===================================================================
--- Makefile.in	(revision 34)
+++ Makefile.in	(working copy)
@@ -62,7 +62,7 @@
 	mv $@ chan_dongle.so
 
 .c.o:
-	$(CC) $(CFLAGS) $(MAKE_DEPS) -o $@ -c $<
+	$(CC) $(CPPFLAGS) $(CFLAGS) $(MAKE_DEPS) -o $@ -c $<
 
 tests: test/test1 test/parse
 
Index: manager.c
===================================================================
--- manager.c	(revision 34)
+++ manager.c	(working copy)
@@ -733,7 +733,11 @@
 	unsigned i;
 	for(i = 0; i < ITEMS_OF(dcm); i++)
 	{
+#if ASTERISK_VERSION_NUM >= 110000
+		ast_manager_register2 (dcm[i].name, dcm[i].authority, dcm[i].func, NULL, dcm[i].brief, dcm[i].desc);
+#else
 		ast_manager_register2 (dcm[i].name, dcm[i].authority, dcm[i].func, dcm[i].brief, dcm[i].desc);
+#endif
 	}
 }
 
